---
layout: post
title:  "Detecting OpenSSL CCS Injection Vulnerability (CVE-2014-0224)"
date:   2014-06-09 16:17:22 +0800
---

Recently another major bug was found in OpenSSL library, [CVE-2014-0224](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0224). Masashi Kikuchi discovered the vulnerability and has ellaborated [here](http://ccsinjection.lepidum.co.jp/blog/2014-06-05/CCS-Injection-en/index.html) on how he discovered the vulnerability. This bug doesn't have repercussions as Heartbleed bug, but still severe enough to patch the systems running vulnerable OpenSSL versions. There are many blog entries discussing this bug in [detail](https://www.imperialviolet.org/2014/06/05/earlyccs.html), but over here I would like to put some light on how to detect this bug in the OpenSSL implementation on your own .

Without going into to much detail about how SSL works, the whole vulnerability and its exploit can be summarised as, if a CCS packet is sent before the master secret for an SSL session is calculated, the master secret is based on a weak pre-master secret and hence easily guessable and easy prey for a MITM attack.

In case of version suffering with this vulnerability, if you send [Cipher Change Spec](http://tools.ietf.org/html/rfc5246#page-27) (CCS) packet after completing the *client hello, server hello, server certificate and server hello done* step, you wont receive any SSL alert packet. The remote connection will still be open and listening. While in case of any patched version of OpenSSL, if you send CCS packet out of its sequence, in present case after server hello done, you will receive a fatal SSL alert packet for *'Unexpected Message'*. Below is a screenshot of a Wireshark session and shows the flow of packets and how does the Alert message looks like.

![SSL alert message with 'unexpected message'](/assets/images/ccs_injection.jpg)

This scenario can be easily scripted and used to test against the various installation you might have. The Nmap script is available [here](https://gist.github.com/rcvalle/71f4b027d61a78c42607).

Happy scripting!!
